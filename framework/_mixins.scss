// Clearfix
// -------------
// clearfix - is technique of overflow correction
// to block element containing float elements
@mixin clearfix()
{
  &:before,
  &:after {
    content: " ";
    display: table;
  }
  &:after {
    clear: both;
  }
}

// Font-Face
// -------------
@mixin font-face($font-path, $font-family, $font-weight: null, $font-style:null, $version:null, $svg-font-name:null)
{
  $query: if($version,'?v=#{$version}', null);
  @if $svg-font-name {
    @font-face {
      font-family: $font-family;
      font-weight: $font-weight;
      font-style: $font-style;
      src: url('#{$font-path}.eot#{$query}');
      src: url('#{$font-path}.eot?#iefix#{prepend-dash($version)}') format('embedded-opentype'),
      url('#{$font-path}.woff#{$query}') format('woff'),
      url('#{$font-path}.ttf#{$query}') format('truetype'),
      url('#{$font-path}.svg#{$query}##{$svg-font-name}') format('svg');
    }
  }
  @else {
    @font-face {
      font-family: $font-family;
      src: url('#{$font-path}.eot#{$query}');
      src: url('#{$font-path}.eot?#iefix#{prepend-dash($query)}') format('embedded-opentype'),
      url('#{$font-path}.woff#{$query}') format('woff'),
      url('#{$font-path}.ttf#{$query}') format('truetype');
    }
  }
}

// Property multiplier
// -------------------
@mixin _get-property($properties, $value, $vr)
{
  @each $property in $properties {
    @if $vr != true {
      #{$property}: $value;
    }
    @else {
      @if $property == font-size {
        $value: $value / $vr-line-height;
      }
      @include vr-property($property, $value);
    }
  }
}


// Property generator
// -------------------------------------
// @param string $property any CSS property
// @param string $property-prefix CSS class prefix
// @return
@mixin property($property, $class-property-prefix, $list, $vr:false)
{
  $i: 1 !global;
  $class-before: null;
  $class-after: null;
  $selector-before: (null);
  $selector-after: (null);

  @while $i <= length($list) {

    // step 1
    // ------
    // get selectors
    $first-value: nth($list, $i);

    @if length($first-value) >= 2 {
      $selector-before: ();
      $selector-after: ();

      $b: 1 !global;
      @while $b <= length($first-value) {
        $selector-before: append($selector-before, nth($first-value, $b));
        $selector-after: append($selector-after, nth($first-value, $b + 1));

        $b: $b + 2 !global;
      }

      $i: $i + 1 !global;
    }

    // step 2
    // ------
    // get class name and/or additional selector
    $next-value: nth($list, $i);
    $i: $i + 1 !global;

    //if pre/postfix class names are presented
    @if length($next-value) == 2 {
      $class-before: #{nth($next-value, 1)}_;
      $class-after: nth($next-value, 2);
    }
    //if there is only class postfix
    @else {
      $class-after: $next-value;
    }


    // step 3
    // ------
    // get property value
    $next-value: nth($list, $i);
    $i: $i + 1 !global;

//    $property-value: $next-value;
    $property-value: $next-value, null;

    // step 4
    // ------
    // construct class
    $v: 1;
    @while $v <= length($selector-before) {
      $selector:
        #{nth($selector-before, $v)}#{'.'}#{$class-before}#{$class-property-prefix}#{$class-after}#{nth($selector-after, $v)};

      #{$selector} {
        $pass: nth($property-value, $v);
        @include _get-property($property, $pass, $vr);
      }

      $v: $v + 1;
    }

  }
}
