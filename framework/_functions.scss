// List Filter
// ------------------------------
// filter list 1 or filter list 2 by list 1
@function list-filter($list-1, $list-2:null)
{
  $i: 1 !global;
  $output: () !global;
  @while $i <= length($list-1) {
    @if nth($list-1, $i) {
      @if $list-2 {
        $output: append($output, nth($list-2, $i)) !global;
      }
      @else       {
        $output: append($output, nth($list-1, $i)) !global;
      }
    }

    $i: $i + 1 !global;
  }

  @return $output;
}

// Exclude one value from list
// ------------------------------
@function exclude-from($list, $value:null)
{
  $output: () !global;
  @if $value {
    @each $val-of-first in $list {
      @if $val-of-first != $value {
        $output: append($output, $val-of-first) !global;
      }
    }

    @return $output;
  }
  @else {
    @return $list;
  }
}

// Computes the difference of lists
// ------------------------------
// subtract list 2 from list 1
@function diff-list($list-1, $list-2:null)
{
  @if $list-2 {
    @each $val-of-first in $list-1 {
      @each $val-of-second in $list-2 {
        @if $val-of-first == $val-of-second {
          $list-1: exclude-from($list-1, $val-of-first);
        }
      }
    }

    @return $list-1;
  }
  @else {
    @return $list-1;
  }
}

// Search Value in list
// ------------------------------
// check if value exists in list
@function in-list($value, $list)
{
  @if $list and length($list) > 0 {
    $z: 1 !global;
    @while $z <= length($list) {
      $array_value: nth($list, $z);
      $check: false !default;

      @if $array_value == $value or $array_value == all {
        $check: true;
      }

      //on the last cycle
      @if $check or $z == length($list) {
        @return $check;
      }

      $z: $z + 1 !global;
    }
  }
  @else {
    @return false;
  }
}

// List Reordering
// ------------------------------
// reverse list oreder
@function reverse-list($list)
{
  $reverse-list: () !global;
  $i: length($list) !global;

  @while $i >= 1 {
    $reverse-list: append($reverse-list, nth($list, $i)) !global;
    $i: $i - 1 !global;
  }
  @return $reverse-list;
}

// Dash Appender
// ------------------------------
// just append dash to value
@function append-dash($value)
{
  $value: if($value, unquote("#{$value}-"), null);
  @return $value;
}

// Dash Prepender
// ------------------------------
// just prepend dash to value
@function prepend-dash($value)
{
  $value: if($value, unquote("-#{$value}"), null);
  @return $value;
}


// Grid Settings Calculator
// ------------------------------
// @param
// @param
// @return
@function calc-grid ($columns, $method, $mixed, $type: padding-based)
{
  $column: null;
  $gap: null;

  // Gaps By Padding
  @if $type==padding-based and $method==gap {
    $gap: $mixed;

    $column: 100% / $columns;
    $gap: $gap/2;
  }
  @else if $type==padding-based and $method==column {
    $ratio: $mixed;

    $column: 100% / $columns;
    $gap: (100% - ($ratio * $columns)) / $columns;
  }
  @else if $type==padding-based and $method==column-gap {
    $px-column: nth($mixed,1);
    $px-gap: nth($mixed,2);
    $px-row: ($columns * $px-column) + ($px-gap * ($columns - 1));
    $percent-gap: percentage($px-gap/$px-row);

    $column: 100% / $columns;
    $gap: $percent-gap/2;
  }

  // Gaps by Margin
  // (deprecated)

  // Gapless calculation
  // (deprecated)


  @return ($column, $gap, $columns); //+$type
}


// Screen List Divider
// ------------------------------
$break-polarity: right !default;
@function break-list($return, $screen-list, $breakpoint, $additional-list:null)
{
  //redefine and exclude null values
  $screen-list: list-filter($screen-list);
  $additional-list: list-filter($screen-list, $additional-list);

  //define source to work with
  $values-list: if($additional-list, $additional-list, $screen-list);

  $breakpoint: if($break-polarity==right, $breakpoint - 1px, $breakpoint + 1px);


  //divide input value list into two list according to breakpoint
  $i: 1 !global;
  $values-before: ();
  $values-after: ();
  @while $i <= length($screen-list) {
    @if nth($screen-list, $i) < $breakpoint {
      $values-before: append($values-before, nth($values-list, $i));
    }
    @if nth($screen-list, $i) > $breakpoint {
      $values-after: append($values-after, nth($values-list, $i));
    }

    $i: $i + 1 !global;
  }

  //reverse sequence for using in styles
  $values-before: reverse-list($values-before);

  @if $return == before {@return $values-before}
  @if $return == after {@return $values-after}
  @if $return == after-before {@return ($values-after, $values-before)}
  @if $return == united {@return join($values-after, $values-before)}
}

// Media Query Range Generator
// ------------------------------
// opened - bounded range
// closed - unbounded range
// @return media query according to input screen
@function get-media($type, $screen-width, $screen-list, $breakpoint)
{
  //get two lists of arranged screens in accordance with breakpoint
  $screen-list: break-list(after-before, $screen-list, $breakpoint);
  $screens-after-break: nth($screen-list, 1);
  $screens-before-break: nth($screen-list, 2);

  //redefine breakpoint according to break polarity
  $breakpoint: if($break-polarity == right, $breakpoint - 1px, $breakpoint + 1px);

  //define polarity according to polarity
  $polarity:           if($screen-width > $breakpoint, min, max);
  $polarity-opposite:  if($screen-width > $breakpoint, max, min);

  //add or subtract 1px at the junction of screens
  $px: if($screen-width > $breakpoint, -1, 1);

  //define final screen list where placed input screen
  $screens: if($screen-width > $breakpoint, $screens-after-break, $screens-before-break);

  $i: 1 !global;
  @while $i <= length($screens) {
    $current-screen: nth($screens, $i);
    $biggest-screen: nth($screens, length($screens));
    $smallest-screen: nth($screens, 1);

    //within the limits of screen list
    @if $screen-width == $current-screen {

      @if $type == closed {
        @if $i < length($screens) or $i > 1 and $i!=length($screens) and length($screens) > 1 {
          $next-screen: nth($screens, $i + 1);
          @return '(#{$polarity}-width: #{$current-screen}) and (#{$polarity-opposite}-width: #{$next-screen + $px})';
        }
        @else {
          @return '(#{$polarity}-width: #{$current-screen})';
        }
      }

      @else if $type == opened {
        @return '(#{$polarity}-width: #{$current-screen})';
      }

      @else if $type==united {
        @if length($screens-before-break) >= 1 and length($screens-after-break) >= 1  {
          $last-screen-before: nth($screens-before-break, 1);
          $first-screen-after: nth($screens-after-break, 1);

          @if $break-polarity == left {
            $polarity:           if($screen-width > $breakpoint, max, min);
            $polarity-opposite:  if($screen-width > $breakpoint, min, max);
            $px: if($screen-width > $breakpoint, 1, -1);
          }

          @return
            '(#{$polarity-opposite}-width: #{$first-screen-after + $px}) and (#{$polarity}-width: #{$last-screen-before - $px})';
        }
        @if length($screens-before-break) == 0  {
          $needed-screen: nth($screens-after-break, 1);
          @return '(#{$polarity-opposite}-width: #{$needed-screen + $px})';
        }
        @if length($screens-after-break) == 0 {
          $needed-screen: nth($screens-before-break, 1);
          @return '(#{$polarity-opposite}-width: #{$needed-screen + $px})';
        }

      }
    }

    //within the limits of screen list
    //      @else {
    //        @if $type == closed {
    //          @if $i < length($screens) or $i > 1 and $i!=length($screens) and length($screens) > 1 and $current-screen <= $smallest-screen  {
    //            $next-screen: nth($screens, $i + 1);
    //            @return '(#{$polarity}-width: #{$screen-width}) and (#{$polarity-opposite}-width: #{$next-screen + $px})';
    //          }
    //          @else {
    //            @return '(#{$polarity}-width: #{$screen-width})';
    //          }
    //        }
    //        @else if $type == opened {
    //          @return '(#{$polarity}-width: #{$screen-width})';
    //        }
    //      }

    $i: $i + 1 !global;
  }

}

// Remove Value's Unit
// -------------------
@function ununit($value) {
  @if unitless($value)              { @return $value; }
  @else if unit($value) == '%'      { @return $value / 1%; }
  @else if unit($value) == 'px'     { @return $value / 1px; }
  @else if unit($value) == 'pt'     { @return $value / 1pt; }
  @else if unit($value) == 'em'     { @return $value / 1em; }
  @else if unit($value) == 'rem'    { @return $value / 1rem; }
}

// Append Specific Unit
// --------------------
@function setunit($value, $unit: integer) {
  @if $unit == integer              { @return ununit($value); }
  @else if $unit == '%'             { @return ununit($value)+0%; }
  @else if $unit == 'px'            { @return ununit($value)+0px; }
  @else if $unit == 'pt'            { @return ununit($value)+0pt; }
  @else if $unit == 'em'            { @return ununit($value)+0em; }
  @else if $unit == 'rem'           { @return ununit($value)+0rem; }
}

// Unit Converter
// --------------
@function _tounit($value, $unit: none, $pixel-size: 16px, $ppi-ratio: 72/96) {
  $pixel-size: ununit($pixel-size);

  @if $unit != none {
    //PERCENT TO UNIT
    @if unit($value) == '%' {
      $value: round($value * $pixel-size/100) / ($pixel-size/100);
      @if $unit == '%'              { @return $value; }
      @if $unit == 'px'             { @return setunit($value * $pixel-size/100, px); }
      @else if $unit == 'pt'        { @return setunit($value * $pixel-size/100 * $ppi-ratio, pt); }
      @else if $unit == 'em'        { @return setunit($value / 100, em); }
      @else if $unit == 'rem'       { @return setunit($value / 100, rem); }
      @else if $unit == 'unitless'  { @return setunit($value / 100); }
    }
      //PX TO UNIT
    @else if unit($value) == 'px' {
      //$value: round($value); //?
      @if $unit == '%'              { @return setunit($value * 100 / $pixel-size, '%'); }
      @if $unit == 'px'             { @return $value; }
      @else if $unit == 'pt'        { @return setunit($value * $ppi-ratio, pt); }
      @else if $unit == 'em'        { @return setunit($value / $pixel-size, em); }
      @else if $unit == 'rem'       { @return setunit($value / $pixel-size, rem); }
      @else if $unit == 'unitless'  { @return setunit($value / $pixel-size); }
    }
      //EM, REM, UNITLESS TO UNIT
    @else if unit($value) == 'em' or unit($value) == 'rem' or unitless($value) {
      @if $unit == '%'              { @return setunit(ununit($value) * 100, '%'); }
      @if $unit == 'px'             { @return setunit($value * $pixel-size, px); } //round?
      @else if $unit == 'pt'        { @return setunit(ununit($value) * $pixel-size * $ppi-ratio, pt); }
      @else if $unit == 'em'        { @return setunit($value, em); }
      @else if $unit == 'rem'       { @return setunit($value, rem); }
      @else if $unit == 'unitless'  { @return setunit($value); }
    }
      //PT TO UNIT
    @else if unit($value) == 'pt' {
      @if $unit == '%'              { @return setunit(ununit($value) / $ppi-ratio * 100/ununit($pixel-size), '%'); }
      @if $unit == 'px'             { @return setunit(round($value / $ppi-ratio), px); }
      @else if $unit == 'pt'        { @return $value; }
      @else if $unit == 'em'        { @return setunit(ununit($value) / $ppi-ratio / $pixel-size, em); }
      @else if $unit == 'rem'       { @return setunit(ununit($value) / $ppi-ratio / $pixel-size, rem); }
      @else if $unit == 'unitless'  { @return setunit(ununit($value) / $ppi-ratio / $pixel-size); }
    }
  }
  @else if $unit == none {
    @return ununit($value);
  }
}

//trick to get always integer pixel value at the end of browser rendering
@function tounit($value, $unit: none) {
  @return _tounit(round(_tounit($value, px)), $unit)
  //  @return _tounit($value, $unit);
}