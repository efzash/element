// MAKE EASY THINGS DIFFICULT.
// PLEASE DO NOT READ THIS IF YOU HAVE POOR SASS KNOWLEADGE
// AND HAVEN'T RED DOCUMENTATION!
// You may never use this file if it confuse you.

// Default Variables
// --------------------------------------------------

  $vr-font-size:      $font-size !default;

  //values for calculatings
  $vr-line-height:    ununit(tounit($line-height, rem)) !default;
//  $vr-line-height:  ununit(round(tounit($line-height, px))/16) !default;

  //newline threshold
  $vr-line-threshold: $line-threshold !default; //%

  //unit fallback
  $vr-unit-fallback:  false !default;

  //output unit rendering
  //rem, px, pt
  $vr-font-unit:      rem !default;
  $vr-line-unit:      rem !default;


// Mixins & Functions
// --------------------------------------------------


  // New Line Calculator
  // -----------------------------
  @function vr-number-of-lines($font-size, $threshold: $vr-line-threshold, $line-height: $vr-line-height) {
    $threshold: ununit($threshold);
    $font-size: ununit($font-size);
    $multiplier: ceil( $font-size / ($line-height * ($threshold/100)) );

    @return $multiplier;
  }

  // Each Vr Value Handler
  // -----------------------------
  @function vr-value-handler($value, $unit: $vr-line-unit) {
    @if $value == important {
      @return unquote('!'+$value);
    }
    @else if type-of($value) == string {
      @return $value;
    }
    @else if type-of($value) == number {
      @return tounit(tounit($value, rem) * $vr-line-height, $unit);
    }
    @else {
      @return null;
    }
  }

  // Value List Handler
  // -----------------------------
  @function vr-list-handler($args, $unit: $vr-line-unit) {
    $values: ();

    @each $arg in $args {
      @if type-of($arg)!=string or $arg==auto or $arg==inherit or $arg==important {
        $values: append( $values, vr-value-handler($arg, $unit) );
      }
    }

    @return $values;
  }


  // A Single Value Properties
  // -----------------------------
  @mixin vr-property ($property, $mixed, $unit: $vr-line-unit, $fallback: $vr-unit-fallback) {
    $value: nth($mixed, 1);
    $important: null;

    @if length($mixed) > 1 {
      $important: if(nth($mixed, 2) == important, important, null);
    }

    @if $fallback and type-of($value)==number and $unit!=px {
      #{$property}: vr-list-handler(join($value, $important), px);
    }

    //#{$property}: if($offset == null, calc(#{$value} + #{$offset}), $value);
    $value: vr-list-handler(join($value, $important), $unit);
    #{$property}: $value;
  }


  // A Multiple Value Properties
  // ---------------------------
  @function indent-direction($mixed) {
    $direction: nth($mixed, 1);
    @return if( $direction==left or $direction==top or $direction==right or $direction==bottom, '-'+$direction, null );
  }

  @mixin vr-property-multi($property, $mixed, $unit: $vr-line-unit, $fallback: $vr-unit-fallback) {
    $direction: indent-direction($mixed);
    @if $fallback and $unit != px {
      #{$property}#{$direction}: vr-list-handler($mixed, px);
    }
    #{$property}#{$direction}: vr-list-handler($mixed, $unit);
  }


  // VR Properties Aliases
  // --------------------------
  @mixin font-size($value, $mixed...) {
    //Font size
    $value: tounit($value, rem);

    //Render Font-size
    @include vr-property (font-size, join($value / $vr-line-height, $mixed));

    //if line-height specified
    @if $mixed {
      $lines: if(type-of($mixed)==number, $mixed, vr-number-of-lines($value));
      @include vr-property (line-height, $lines);
    }
  }
  @mixin line-height($value, $mixed...) {@include vr-property(line-height, join($value, $mixed));}
  @mixin height($value, $mixed...)      {@include vr-property(height, join($value, $mixed));}
  @mixin max-height($value, $mixed...)  {@include vr-property(max-height, join($value, $mixed));}
  @mixin min-height($value, $mixed...)  {@include vr-property(min-height, join($value, $mixed));}
  @mixin width($value, $mixed...)       {@include vr-property(width, join($value, $mixed));}
  @mixin max-width($value, $mixed...)   {@include vr-property(max-width, join($value, $mixed));}
  @mixin min-width($value, $mixed...)   {@include vr-property(min-width, join($value, $mixed));}
  @mixin top($value, $mixed...)         {@include vr-property(top, join($value, $mixed));}
  @mixin right($value, $mixed...)       {@include vr-property(right, join($value, $mixed));}
  @mixin bottom($value, $mixed...)      {@include vr-property(bottom, join($value, $mixed));}
  @mixin left($value, $mixed...)        {@include vr-property(left, join($value, $mixed));}
  @mixin margin($value, $mixed...)      {@include vr-property-multi(margin, join($value, $mixed));}
  @mixin padding($value, $mixed...)     {@include vr-property-multi(padding, join($value, $mixed));}

// temporary
%vr-grid {
  background-image: linear-gradient(rgba(0,0,0,0.1) 0px, transparent 1px);
  background-size: 100% #{$vr-line-height}rem;
  background-repeat: repeat;
  background-position: top left;
  //@include clearfix();
  //background-position: 0 1.3rem; //only for leveling
}