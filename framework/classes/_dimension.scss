@import '../_globals.scss';
@import '../_naming.scss';
@import '../_functions.scss';
@import '../_mixins.scss';
@import '../_vr.scss';

//@todo max-min height and width

// Default Variables
// --------------------------------------------------
  $dimension: false !default;

  $dimension-exclude: false !default;
  $dimension-include: diff-list((
    width, min-width, max-width, height, min-height, max-height
    ), $dimension-exclude) !default;

  $dimension-set:
    def, $size-default,
    xxsm, $size-xxsm,
    xsm, $size-xsm,
    sm, $size-sm,
    md, $size-md,
    lg, $size-lg,
    xlg, $size-xlg,
    xxlg, $size-xxlg !default;
  $dimension-height-set:    $dimension-set !default;
  $dimension-width-set:     $dimension-set !default;

  // Media Dimension
  // -----------------
  $dimension-screens:      break-list(united, $screen-list, $screen-breakpoint);
  $dimension-screen-names: break-list(united, $screen-list, $screen-breakpoint, $screen-name-list);

// Mixins & Functions
// --------------------------------------------------


// Output Styles
// --------------------------------------------------

@if $dimension or $dimension == static {

  @if in-list(height, $dimension-include) {
    .#{$Height}0     {height:0;}
    .#{$Height}100   {height:100%;}
    .#{$Height}auto  {height:auto;}
    @include property(height, $Height, $dimension-height-set, $vr);
  }
  @if in-list(width, $dimension-include) {
    .#{$Width}0     {width:0;}
    .#{$Width}100   {width:100%;}
    .#{$Width}auto  {width:auto;}
    @include property(width, $Width, $dimension-width-set, $vr);
  }

  $f: 1;
  @while $f <= length($dimension-screens) {
    $screen:      nth($dimension-screens, $f);
    $screen-name: nth($dimension-screen-names, $f);

    @if in-list(max-height, $dimension-include) or in-list(min-height, $dimension-include) {
      .#{$Max-height}#{$screen-name}    {max-height:$screen;}
    }
    @if in-list(min-height, $dimension-include) or in-list(min-height, $dimension-include) {
      .#{$Min-height}#{$screen-name}    {min-height:$screen;}
    }

    $f: $f + 1;
  }

}

@if $dimension or $dimension == responsive {

  $f: 1;
  @while $f <= length($dimension-screens) {
    $screen:      nth($dimension-screens, $f);
    $screen-name: nth($dimension-screen-names, $f);

    @media #{get-media(opened, $screen, $screen-list, $screen-breakpoint)} {
      @if in-list(height, $dimension-include) {
        .#{$screen-name}-#{$Height}auto  {height:auto;}
        .#{$screen-name}-#{$Height}100   {height:100%;}
      }
      @if in-list(width, $dimension-include) {
        .#{$screen-name}-#{$Width}auto   {width:auto;}
        .#{$screen-name}-#{$Width}100    {width:100%;}
      }
      @if in-list(max-width, $dimension-include) or in-list(min-width, $dimension-include) {
        .#{$Max-width}#{$screen-name}     {max-width:$screen;}
      }
      @if in-list(min-width, $dimension-include) or in-list(min-width, $dimension-include) {
        .#{$Min-width}#{$screen-name}     {min-width:$screen;}
      }

      $f: $f + 1;
    }
  }

} $dimension: false;